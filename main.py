import matplotlib.pyplot as plt
import numpy as np

import bayesian
import epsilon_greedy
import ucb1

if __name__ == "__main__":
    probs = [0.2, 0.4, 0.5, 0.75, 0.8]
    num_trials = 10000
    epochs = 100

    win_rates_greedy, N_optimal_greedy = [], []
    win_rates_ucb1, N_optimal_ucb1 = [], []
    win_rates_bayesian, N_optimal_bayesian = [], []

    results = [[],[],[]]

    for i in range(epochs):
        win_rates, N_optimal = epsilon_greedy.run_experiment(probs, num_trials)
        win_rates_greedy.append(win_rates)
        N_optimal_greedy.append(N_optimal)
        win_rates, N_optimal = ucb1.run_experiment(probs, num_trials)
        win_rates_ucb1.append(win_rates)
        N_optimal_ucb1.append(N_optimal)
        win_rates, N_optimal = bayesian.run_experiment(probs, num_trials)
        win_rates_bayesian.append(win_rates)
        N_optimal_bayesian.append(N_optimal)
    
    for i in range(epochs):
        for j in range(len(results)):
            if i==0:
                if j==0:
                    results[j] = np.array(win_rates_greedy[i])
                if j==1:
                    results[j] = np.array(win_rates_ucb1[i])
                if j==2:
                    results[j] = np.array(win_rates_bayesian[i])
            else:
                if j==0:
                    results[j] += np.array(win_rates_greedy[i])
                if j==1:
                    results[j] += np.array(win_rates_ucb1[i])
                if j==2:
                    results[j] += np.array(win_rates_bayesian[i])

    for j in range(len(results)):
        results[j] /= epochs

    for j in range(len(results)):
        print("Win-rate: ", results[j][-1])

    print("# times optimal bandit played with epsilon-greedy: ", np.average(N_optimal_greedy))
    print("# times optimal bandit played with UCB1: ", np.average(N_optimal_ucb1))
    print("# times optimal bandit played with Thompson Sampling: ", np.average(N_optimal_bayesian))
    
    plt.plot(results[0], label="epsilon-greedy")
    plt.plot(results[1], label="ucb1")
    plt.plot(results[2], label="Bayesian Bandit / Thompson Sampling")
    plt.plot(np.ones(num_trials)*np.max(probs), label="Optimal win-rate")
    plt.legend()
    plt.show()

    